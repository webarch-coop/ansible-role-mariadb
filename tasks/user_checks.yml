# Copyright 2018-2023 Chris Croome
#
# This file is part of the Webarchitects MariaDB Ansible role.
#
# The Webarchitects MariaDB Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects MariaDB Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects MariaDB Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Set MariaDB variables and paths
  block:

    - name: Include debugging
      ansible.builtin.include_tasks: user_checks_debug.yml
      when: >-
        ( ( enable_task_debugger is defined ) and
        ( enable_task_debugger | bool ) ) or
        ( ansible_verbosity >= 2 )

    - name: Check the mariadb_username variable is valid
      ansible.builtin.assert:
        that:
          - mariadb_username is defined
          - mariadb_username is regex("^[a-z0-9_]{1,64}$")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check the mariadb_database variable is valid if defined
      ansible.builtin.assert:
        that:
          - mariadb_database is regex("^[a-z0-9_]{1,64}$")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: mariadb_database is defined

    - name: Chris that the mariadb_privs are valid if defined
      ansible.builtin.assert:
        that:
          - mariadb_privs | type_debug == "list"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: mariadb_privs is defined

    - name: Include verify variable tasks for MariaDB
      ansible.builtin.include_tasks: verify.yml
      when:
        - mariadb_verify is defined
        - mariadb_verify | bool

    - name: Set the mariadb_database name to match the mariadb_username if it is not defined
      ansible.builtin.set_fact:
        mariadb_database: "{{ mariadb_username }}"
      when: mariadb_database is not defined

    - name: Slurp /etc/group
      ansible.builtin.slurp:
        src: /etc/group
      register: mariadb_etc_group_b64encoded

    - name: Slurp /etc/passwd
      ansible.builtin.slurp:
        src: /etc/passwd
      register: mariadb_etc_passwd_b64encoded

    - name: Set facts for users and groups
      ansible.builtin.set_fact:
        mariadb_group: "{{ mariadb_etc_group_b64encoded['content'] | b64decode | string | community.general.jc('group') }}"
        mariadb_passwd: "{{ mariadb_etc_passwd_b64encoded['content'] | b64decode | string | community.general.jc('passwd') }}"

    - name: Set facts for users and groups
      ansible.builtin.set_fact:
        mariadb_groups: "{{ mariadb_group | community.general.json_query(mariadb_jpq.groups) }}"
        mariadb_users: "{{ mariadb_passwd | community.general.json_query(mariadb_jpq.users) }}"

    - name: Set a fact for .my.cnf path and owner if a user account matching the MariaDB username exists
      ansible.builtin.set_fact:
        mariadb_mycnf: "{{ mariadb_passwd | community.general.json_query(mariadb_jpq_passwd_home) }}/.my.cnf"
        mariadb_mycnf_owner: "{{ mariadb_username }}"
      vars:
        mariadb_jpq_passwd_home: "[?username=='{{ mariadb_username }}'].home|[0]"
      when: mariadb_username in mariadb_users

    - name: Set a fact for .my.cnf group if a group account matching the MariaDB username exists
      ansible.builtin.set_fact:
        mariadb_mycnf_group: "{{ mariadb_username }}"
      when: mariadb_username in mariadb_groups

    - name: Set facts for .my.cnf when a user account matching the MariaDB username doesn't exist
      ansible.builtin.set_fact:
        mariadb_mycnf: "/root/.{{ mariadb_username }}.my.cnf"
        mariadb_mycnf_owner: root
        mariadb_mycnf_group: root
      when: mariadb_username is not in mariadb_users

    - name: "Stat {{ mariadb_mycnf }}"
      ansible.builtin.stat:
        path: "{{ mariadb_mycnf }}"
      register: mariadb_mycnf_path

    - name: Debug mariadb_mycnf_path
      ansible.builtin.debug:
        var: mariadb_mycnf_path
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
      when: mariadb_mycnf_path is defined

    - name: "Set a fact if a file exists at {{ mariadb_mycnf }}"
      ansible.builtin.set_fact:
        mariadb_mycnf_present: true
      when:
        - mariadb_mycnf_path.stat.exists is defined
        - mariadb_mycnf_path.stat.exists | bool

    - name: "Set a fact if a file doesn't exist at {{ mariadb_mycnf }}"
      ansible.builtin.set_fact:
        mariadb_mycnf_present: false
      when: >-
        ( mariadb_mycnf_path is not defined ) or
        ( ( mariadb_mycnf_path is defined ) and
        ( not mariadb_mycnf_path.stat.exists | bool ) )

    - name: "Read the password from {{ mariadb_mycnf }}"
      block:

        - name: "The mariadb_password has been loaded since the file exists and the password was not set from {{ mariadb_mycnf }}"
          ansible.builtin.command: "my_print_defaults --defaults-file='{{ mariadb_mycnf }}' client"
          check_mode: false
          changed_when: false
          register: mariadb_my_print_defaults_command
          no_log: "{% if ansible_verbosity <= 2 %}true{% else %}false{% endif %}"

        - name: Set a fact for mariadb_password
          ansible.builtin.set_fact:
            mariadb_password: "{{ line | regex_replace('^--password=') }}"
          when: line is regex('^--password=')
          loop: "{{ mariadb_my_print_defaults_command.stdout_lines }}"
          loop_control:
            loop_var: line
          no_log: "{% if ansible_verbosity <= 2 %}true{% else %}false{% endif %}"

      when:
        - mariadb_mycnf_present is defined
        - mariadb_mycnf_present | bool

    - name: Generate a password
      block:

        - name: "Generate a random password as it is not defined or empty for {{ mariadb_username }}"
          ansible.builtin.command: "pwgen -n {{ 36 | random(24) }} 1"
          check_mode: false
          changed_when: false
          register: mariadb_password_gen
          no_log: "{% if ansible_verbosity <= 2 %}true{% else %}false{% endif %}"

        - name: Set a fact for the mariadb_password
          ansible.builtin.set_fact:
            mariadb_password: "{{ mariadb_password_gen.stdout | trim | quote }}"
          no_log: "{% if ansible_verbosity <= 2 %}true{% else %}false{% endif %}"

      when:
        - mariadb_mycnf_present is defined
        - not mariadb_mycnf_present | bool

    - name: Fail if any variables are not defined
      ansible.builtin.assert:
        that:
          - mariadb_username is defined
          - mariadb_password is defined
          - mariadb_database is defined
          - mariadb_mycnf is defined
          - mariadb_priv is defined
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Include debugging
      ansible.builtin.include_tasks: user_checks_debug.yml
      when: >-
        ( ( enable_task_debugger is defined ) and
        ( enable_task_debugger | bool ) ) or
        ( ansible_verbosity >= 2 )

  tags:
    - mariadb
...
